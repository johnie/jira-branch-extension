{"mappings":"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","sources":["jira-branch-extension/src/lib/config.js","jira-branch-extension/src/lib/utils.js","jira-branch-extension/src/lib/chrome.js","jira-branch-extension/src/lib/api.js","jira-branch-extension/src/app.js"],"names":["$ab9f6ca6f11c09147a87c0279805db7b$exports","IS_DEV","undefined","API_URL","slugify","string","a","p","RegExp","split","join","toString","toLowerCase","replace","c","charAt","indexOf","setBranchName","issue","branch","concat","$aecb9df918e3069c67c182e4$exports","getIssueFromUrl","url","substring","lastIndexOf","copyToClipboard","str","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","setFullBranchName","_ref","type","title","$ce87612849b757c0fe39407a3a5b557a$exports","getIssueKey","Promise","resolve","reject","chrome","tabs","query","active","tab","$ce87612849b757c0fe39407a3a5b557a$var$_slicedToArray","$ffd4b5a499e57c7f7b14344c5375877$exports","fetchIssueData","then","key","fetch","res","catch","err","error","branchTypeData","map","name","val","branchTypeHtml","data","addEventListener","titleS","issuuuuu","SELECT_BRANCH_TYPE","querySelector","ISSUE_TITLE_INPUT","COPY","PREVIEW","innerHTML","json","fields","summary","issueDataMapper","branchName","finalName","e","target"],"version":3,"file":"app.2e803be3.js.map","sourcesContent":["const IS_DEV = process.env.ENVIRONMENT === 'development';\n\nconst API_URL = IS_DEV\n    ? 'http://localhost:3000/'\n    : 'https://jira.mrgreen.zone/';\n\nmodule.exports = {\n    IS_DEV,\n    API_URL\n};\n","const copyToClipboard = str => {\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n};\n\nfunction slugify(string) {\n    const a =\n        'àáäâãåăæąçćčđďèéěėëêęğǵḧìíïîįłḿǹńňñòóöôœøṕŕřßşśšșťțùúüûǘůűūųẃẍÿýźžż·/_,:;';\n    const b =\n        'aaaaaaaaacccddeeeeeeegghiiiiilmnnnnooooooprrsssssttuuuuuuuuuwxyyzzz------';\n    const p = new RegExp(a.split('').join('|'), 'g');\n\n    return string\n        .toString()\n        .toLowerCase()\n        .replace(/\\s+/g, '-') // Replace spaces with -\n        .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n        .replace(/&/g, '-and-') // Replace & with 'and'\n        .replace(/[^\\w\\-]+/g, '') // Remove all non-word characters\n        .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n        .replace(/^-+/, '') // Trim - from start of text\n        .replace(/-+$/, ''); // Trim - from end of text\n}\n\nconst getIssueFromUrl = url => url.substring(url.lastIndexOf('/') + 1);\nconst setBranchName = (issue, branch) => `${issue}-${slugify(branch)}`;\nconst setFullBranchName = ({ type, issue, title }) =>\n    `${type}${setBranchName(issue, title)}`;\n\nmodule.exports = {\n    slugify,\n    getIssueFromUrl,\n    copyToClipboard,\n    setBranchName,\n    setFullBranchName\n};\n","const config = require('./config');\nconst utils = require('./utils');\n\nconst getIssueKey = () =>\n    new Promise((resolve, reject) => {\n        if (chrome.tabs && chrome.tabs.query) {\n            chrome.tabs.query({ active: true }, function(tabs) {\n                const [tab] = tabs;\n                const issue = utils.getIssueFromUrl(tab.url);\n                resolve(issue);\n            });\n        } else if (config.IS_DEV) {\n            resolve('PRGG-888');\n        } else {\n            reject(false);\n        }\n    });\n\nmodule.exports = {\n    getIssueKey\n};\n","const config = require('./config.js');\nconst chrome = require('./chrome.js');\n\nconst fetchIssueData = () =>\n    new Promise((resolve, reject) => {\n        chrome\n            .getIssueKey()\n            .then(key => {\n                fetch(\n                    `${config.API_URL}rest/api/latest/issue/${key}?fields=summary`\n                )\n                    .then(res => resolve(res))\n                    .catch(err => reject('fetch', err));\n            })\n            .catch(error => reject('chrome', error));\n    });\n\nmodule.exports = { fetchIssueData };\n","const config = require('./lib/config.js');\nconst utils = require('./lib/utils.js');\nconst api = require('./lib/api.js');\n\nconst branchType = ['Feature', 'Bugfix', 'Hotfix', 'Release', 'None'];\n\nconst branchTypeData = branchType.map(name => {\n    const val = name.toLowerCase();\n    return {\n        name,\n        value: val !== 'none' ? `${val}/` : ''\n    };\n});\n\nconst radioHtml = ({ name, value }) => `\n<option value=\"${value}\">${name}</option>\n`;\n\nconst branchTypeHtml = branchTypeData.map(data => radioHtml(data)).join('');\n\nconst issueDataMapper = data => {\n    return {\n        issue: data.key,\n        title: data.fields.summary\n    };\n};\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const SELECT_BRANCH_TYPE = document.querySelector('#branchType');\n    const ISSUE_TITLE_INPUT = document.querySelector('#issueTitle');\n    const COPY = document.querySelector('#copy');\n    const PREVIEW = document.querySelector('#preview');\n    SELECT_BRANCH_TYPE.innerHTML = branchTypeHtml;\n    let titleS;\n    let issuuuuu;\n\n    api.fetchIssueData()\n        .then(res => res.json())\n        .then(data => {\n            const res = issueDataMapper(data);\n            const title = utils.slugify(res.title);\n            const issue = res.issue;\n            issuuuuu = issue;\n            const branchName = `${issue}-${title}`;\n            titleS = branchName;\n            ISSUE_TITLE_INPUT.value = branchName;\n            const finalName = `${SELECT_BRANCH_TYPE.value}${branchName}`;\n            PREVIEW.innerHTML = finalName;\n            COPY.addEventListener('click', function() {\n                utils.copyToClipboard(finalName);\n            });\n        });\n\n    const form = document.querySelector('form');\n    SELECT_BRANCH_TYPE.addEventListener('change', function(e) {\n        PREVIEW.innerHTML = utils.setFullBranchName({\n            type: e.target.value,\n            issue: issuuuuu,\n            title: titleS\n        });\n    });\n});\n"]}